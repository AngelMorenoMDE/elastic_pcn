/**
 */
package pcn.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import pcn.util.PcnAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PcnItemProviderAdapterFactory extends PcnAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PcnItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNDiagramItemProvider pcnDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNDiagramAdapter() {
		if (pcnDiagramItemProvider == null) {
			pcnDiagramItemProvider = new PCNDiagramItemProvider(this);
		}

		return pcnDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNProcessEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNProcessEntityItemProvider pcnProcessEntityItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNProcessEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNProcessEntityAdapter() {
		if (pcnProcessEntityItemProvider == null) {
			pcnProcessEntityItemProvider = new PCNProcessEntityItemProvider(this);
		}

		return pcnProcessEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNReferenceItemProvider pcnReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNReferenceAdapter() {
		if (pcnReferenceItemProvider == null) {
			pcnReferenceItemProvider = new PCNReferenceItemProvider(this);
		}

		return pcnReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNRequiredDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNRequiredDependencyItemProvider pcnRequiredDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNRequiredDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNRequiredDependencyAdapter() {
		if (pcnRequiredDependencyItemProvider == null) {
			pcnRequiredDependencyItemProvider = new PCNRequiredDependencyItemProvider(this);
		}

		return pcnRequiredDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNOptionalDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNOptionalDependencyItemProvider pcnOptionalDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNOptionalDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNOptionalDependencyAdapter() {
		if (pcnOptionalDependencyItemProvider == null) {
			pcnOptionalDependencyItemProvider = new PCNOptionalDependencyItemProvider(this);
		}

		return pcnOptionalDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNStandardDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNStandardDependencyItemProvider pcnStandardDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNStandardDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNStandardDependencyAdapter() {
		if (pcnStandardDependencyItemProvider == null) {
			pcnStandardDependencyItemProvider = new PCNStandardDependencyItemProvider(this);
		}

		return pcnStandardDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNStartProcessStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNStartProcessStepItemProvider pcnStartProcessStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNStartProcessStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNStartProcessStepAdapter() {
		if (pcnStartProcessStepItemProvider == null) {
			pcnStartProcessStepItemProvider = new PCNStartProcessStepItemProvider(this);
		}

		return pcnStartProcessStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNEndProcessStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNEndProcessStepItemProvider pcnEndProcessStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNEndProcessStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNEndProcessStepAdapter() {
		if (pcnEndProcessStepItemProvider == null) {
			pcnEndProcessStepItemProvider = new PCNEndProcessStepItemProvider(this);
		}

		return pcnEndProcessStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNStandardProcessStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNStandardProcessStepItemProvider pcnStandardProcessStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNStandardProcessStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNStandardProcessStepAdapter() {
		if (pcnStandardProcessStepItemProvider == null) {
			pcnStandardProcessStepItemProvider = new PCNStandardProcessStepItemProvider(this);
		}

		return pcnStandardProcessStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNLongProcessStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNLongProcessStepItemProvider pcnLongProcessStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNLongProcessStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNLongProcessStepAdapter() {
		if (pcnLongProcessStepItemProvider == null) {
			pcnLongProcessStepItemProvider = new PCNLongProcessStepItemProvider(this);
		}

		return pcnLongProcessStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNWaitProcessStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNWaitProcessStepItemProvider pcnWaitProcessStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNWaitProcessStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNWaitProcessStepAdapter() {
		if (pcnWaitProcessStepItemProvider == null) {
			pcnWaitProcessStepItemProvider = new PCNWaitProcessStepItemProvider(this);
		}

		return pcnWaitProcessStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNDecisionProcessStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNDecisionProcessStepItemProvider pcnDecisionProcessStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNDecisionProcessStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNDecisionProcessStepAdapter() {
		if (pcnDecisionProcessStepItemProvider == null) {
			pcnDecisionProcessStepItemProvider = new PCNDecisionProcessStepItemProvider(this);
		}

		return pcnDecisionProcessStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNPositiveDecision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNPositiveDecisionItemProvider pcnPositiveDecisionItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNPositiveDecision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNPositiveDecisionAdapter() {
		if (pcnPositiveDecisionItemProvider == null) {
			pcnPositiveDecisionItemProvider = new PCNPositiveDecisionItemProvider(this);
		}

		return pcnPositiveDecisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNNegativeDecision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNNegativeDecisionItemProvider pcnNegativeDecisionItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNNegativeDecision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNNegativeDecisionAdapter() {
		if (pcnNegativeDecisionItemProvider == null) {
			pcnNegativeDecisionItemProvider = new PCNNegativeDecisionItemProvider(this);
		}

		return pcnNegativeDecisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNMonetaryTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNMonetaryTagItemProvider pcnMonetaryTagItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNMonetaryTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNMonetaryTagAdapter() {
		if (pcnMonetaryTagItemProvider == null) {
			pcnMonetaryTagItemProvider = new PCNMonetaryTagItemProvider(this);
		}

		return pcnMonetaryTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNMonetaryBenefit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNMonetaryBenefitItemProvider pcnMonetaryBenefitItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNMonetaryBenefit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNMonetaryBenefitAdapter() {
		if (pcnMonetaryBenefitItemProvider == null) {
			pcnMonetaryBenefitItemProvider = new PCNMonetaryBenefitItemProvider(this);
		}

		return pcnMonetaryBenefitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNMonetaryCost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNMonetaryCostItemProvider pcnMonetaryCostItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNMonetaryCost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNMonetaryCostAdapter() {
		if (pcnMonetaryCostItemProvider == null) {
			pcnMonetaryCostItemProvider = new PCNMonetaryCostItemProvider(this);
		}

		return pcnMonetaryCostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNNonMonetaryTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNNonMonetaryTagItemProvider pcnNonMonetaryTagItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNNonMonetaryTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNNonMonetaryTagAdapter() {
		if (pcnNonMonetaryTagItemProvider == null) {
			pcnNonMonetaryTagItemProvider = new PCNNonMonetaryTagItemProvider(this);
		}

		return pcnNonMonetaryTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNNonMonetaryBenefit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNNonMonetaryBenefitItemProvider pcnNonMonetaryBenefitItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNNonMonetaryBenefit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNNonMonetaryBenefitAdapter() {
		if (pcnNonMonetaryBenefitItemProvider == null) {
			pcnNonMonetaryBenefitItemProvider = new PCNNonMonetaryBenefitItemProvider(this);
		}

		return pcnNonMonetaryBenefitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNNonMonetaryCost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNNonMonetaryCostItemProvider pcnNonMonetaryCostItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNNonMonetaryCost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNNonMonetaryCostAdapter() {
		if (pcnNonMonetaryCostItemProvider == null) {
			pcnNonMonetaryCostItemProvider = new PCNNonMonetaryCostItemProvider(this);
		}

		return pcnNonMonetaryCostItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (pcnDiagramItemProvider != null) pcnDiagramItemProvider.dispose();
		if (pcnProcessEntityItemProvider != null) pcnProcessEntityItemProvider.dispose();
		if (pcnReferenceItemProvider != null) pcnReferenceItemProvider.dispose();
		if (pcnRequiredDependencyItemProvider != null) pcnRequiredDependencyItemProvider.dispose();
		if (pcnOptionalDependencyItemProvider != null) pcnOptionalDependencyItemProvider.dispose();
		if (pcnStandardDependencyItemProvider != null) pcnStandardDependencyItemProvider.dispose();
		if (pcnStartProcessStepItemProvider != null) pcnStartProcessStepItemProvider.dispose();
		if (pcnEndProcessStepItemProvider != null) pcnEndProcessStepItemProvider.dispose();
		if (pcnStandardProcessStepItemProvider != null) pcnStandardProcessStepItemProvider.dispose();
		if (pcnLongProcessStepItemProvider != null) pcnLongProcessStepItemProvider.dispose();
		if (pcnWaitProcessStepItemProvider != null) pcnWaitProcessStepItemProvider.dispose();
		if (pcnDecisionProcessStepItemProvider != null) pcnDecisionProcessStepItemProvider.dispose();
		if (pcnPositiveDecisionItemProvider != null) pcnPositiveDecisionItemProvider.dispose();
		if (pcnNegativeDecisionItemProvider != null) pcnNegativeDecisionItemProvider.dispose();
		if (pcnMonetaryTagItemProvider != null) pcnMonetaryTagItemProvider.dispose();
		if (pcnMonetaryBenefitItemProvider != null) pcnMonetaryBenefitItemProvider.dispose();
		if (pcnMonetaryCostItemProvider != null) pcnMonetaryCostItemProvider.dispose();
		if (pcnNonMonetaryTagItemProvider != null) pcnNonMonetaryTagItemProvider.dispose();
		if (pcnNonMonetaryBenefitItemProvider != null) pcnNonMonetaryBenefitItemProvider.dispose();
		if (pcnNonMonetaryCostItemProvider != null) pcnNonMonetaryCostItemProvider.dispose();
	}

}
